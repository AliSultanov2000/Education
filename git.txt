Система контроля версий — это система, записывающая изменения в файл или набор файлов в течение времени и позволяющая вернуться позже к определённой версии.

Для чего нужен Git? - Git позволяет гибко управлять проектом, сохраняя код, версионность. Это хороший инструмент для командной работы.  Git представляет свои данные как поток снимков (коммитов).
В Git работа ведётся локально, т.е. нет зависимости от других компьютеров и от сети.

ПРЕИМУЩЕСТВА Git:
1) Скорость
2) Простая архитектура 
3) Хорошая поддержка нелинейной разработки (тысячи параллельных веток)
4) Полная децентрализация
5) Возможность управления большими проектами (например, ядро Linux).

Учитывая  эти преимущества, Git-ом пользуются Google, Microsoft, Amazon, Tesla, ...

Git является распределённой системой контроля версий! (децентрализованной)
ПРЕИМУЩЕСТВА ДЕЦЕНТРАЛИЗАЦИИ: 
1) Безопасность в виде устойчивости к отказам
2) Возможность гибкого управления проектом несколькими людьми




ОСНОВНЫЕ СОСТОЯНИЯ ФАЙЛА В Git
1) Рабочий каталог
2) Неотслеживаемое состояние
2) Добавлен в add
3) Добавлен в commit

ОСНОВНЫЕ МЕТОДЫ ПРИ РАБОТЕ С Git
ЗАПОЛНЕНИЕ ДАННЫХ ПОЛЬЗОВАТЕЛЯ
git config --global user.name "Али Султанов"  - Заполнение имени в системе Git
git config --global user.email "ali.sultanov.2024@mail.ru"  - Заполнение почты в системе Git


НАЧАЛО РАБОТЫ В Git в ЛОКАЛЬНОМ РЕПОЗИТОРИЕ:
mkdir repository_name - создание репозитория в Git
cd repository_name - переход в сам репозиторий
git init - инициализация репозитория
git status - статус репозитория
git --version  - версия Git-a
git log  - смотрим на коммиты, на указатель
clear - почистить экран
touch README.md - создание файла README
git add -A - добавление для внесения в коммит всех файлов в рабочем каталоге (файлы будут гореть зеленым)
git add file_name - добавление для внесения в коммит только одного файла
git commit -m "add new feature in ml_design.py" - создание коммита 

РАБОТА С ВЕТКАМИ В Git
git branch - показывает все существующие ветки в проекте
git branch dev - создаёт ветку dev
git checkout -b dev - создаёт ветку dev и переходит в неё 
git checkout master - переключаемся на ветку master
git merge dev (находимся в ветке master) - находясь в ветке master, перетаскиваем коммиты из dev в master

СВЯЗЬ С УДАЛЕННЫМ РЕПОЗИТОРИЕМ (GitHub).
!!! Если хотим отправить на удаленный репозиторий какую-либо ветку, необходимо в неё сначала перейти!
git remote add origin https://github.com/alisultanov/rep_name.git  - подключение к удалённому репозиторию
git push -u origin master - отправляем все изменения в удалённый репозиторий (GitHub)

Комит - слепок системы!



ОСНОВНЫЕ ПРЕИМУЩЕСТВА Git


Как работать в команде при помощи Git: 
