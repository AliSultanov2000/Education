Система контроля версий — это система, записывающая изменения в файл или набор файлов в течение времени и позволяющая вернуться позже к определённой версии.

Для чего нужен Git? - Git позволяет гибко управлять проектом, сохраняя код, версионность. Это хороший инструмент для командной работы.  Git представляет свои данные как поток снимков (коммитов).
В Git работа ведётся локально, т.е. нет зависимости от других компьютеров и от сети. Поэтому нет проблем с задержкой сети или резких сбоев работы

Git является распределённой системой контроля версий! (децентрализованной)

ПРЕИМУЩЕСТВА ДЕЦЕНТРАЛИЗАЦИИ: 
1) Безопасность в виде устойчивости к отказам
2) Возможность гибкого управления проектом несколькими людьми

ПРЕИМУЩЕСТВА Git:
1) Скорость
2) Простая архитектура 
3) Хорошая поддержка нелинейной разработки (тысячи параллельных веток)
4) Полная децентрализация
5) Возможность управления большими проектами (например, ядро Linux)

Учитывая  эти преимущества, Git-ом пользуются Google, Microsoft, Amazon, Tesla, SpaceX...

ОСНОВНЫЕ СОСТОЯНИЯ ФАЙЛА В Git
1) Изменен (в рабочем каталоге)
2) Добавлен в индекс (git add)
3) Добавлен в коммит (git commit)

!!! ВАЖНО:
- К изменённым относятся файлы, которые поменялись, но ещё не были зафиксированы
- Индексированный — это изменённый файл в его текущей версии, отмеченный для включения в следующий коммит
- Закомиченный значит, что файл уже сохранён в вашей локальной базе (Комит - слепок системы!). Когда делается коммит, ИСПОЛЬЗУЮТСЯ ФАЙЛЫ ИЗ ИНДЕКСА как есть, и этот снимок сохраняется Git-ом

ОСНОВНЫЕ МЕТОДЫ ПРИ РАБОТЕ С Git:
    ЗАПОЛНЕНИЕ ДАННЫХ ПОЛЬЗОВАТЕЛЯ:
git config --global user.name "Али Султанов"  - Заполнение имени в системе Git
git config --global user.email "ali.sultanov.2024@mail.ru"  - Заполнение почты в системе Git


!!! ОЧЕНЬ ВАЖНО: git commit сохраняет слепок ИЗМЕНЕНИЯ файлов, а те ФАЙЛЫ, которые уже были в рабочем каталоге, но не были добавлены в индекс, в новом коммите все равно будут, НО НЕ БУДЕТ ИЗМЕНЕНИЙ В ЭТИХ ФАЙЛАХ (ЕСЛИ ОНИ БЫЛИ ПРОИЗВЕДЕНЫ)
!!! ОЧЕНЬ ВАЖНО: Начиная с Git 2.23.0 для операций отмен используется команда restore

НАЧАЛО РАБОТЫ В Git В ЛОКАЛЬНОМ РЕПОЗИТОРИЕ:
mkdir repository_name - создание репозитория в Git
cd repository_name - переход в сам репозиторий
git init - инициализация репозитория
git status - статус репозитория
git --version  - версия Git-a
git log  - смотрим на коммиты, на указатель
clear - почистить экран
touch README.md - создание файла README
git add -A - добавление для внесения в коммит всех файлов в рабочем каталоге (файлы будут гореть зеленым)
git add file_name - добавление для внесения в коммит только одного файла
git commit -m "add new feature in ml_design.py" - создание коммита 
!!!   git restore -- staged filename  - отмена индексации файла (юзаем когда горит зеленым)
!!!   git restore filename  - откат изменений файла в раб. каталоге до последнего коммита (юзаем когда горит красным)

РАБОТА С ВЕТКАМИ В Git:
!!! Git поощряет процесс работы, при котором ветвление и слияние выполняется часто, даже по несколько раз в день. Т.е. имеется долгоживущие и временные ветки.
!!! Ветка в Git — это перемещаемый указатель на коммит.
!!! ОЧЕНЬ ВАЖНО: при переключеии ветки, Git возвращает состояние рабочего каталога к тому виду, какой он имел в момент последнего коммита в переключаемую ветку, чтобы состояние рабочего каталога соответствовало тому, когда был сделан последний коммит.
!!! ОЧЕНЬ ВАЖНО: 
git branch  - показывает все существующие ветки в проекте
git branch -v  - показывает последний коммит в каждой из веток
git branch dev  - создаёт ветку dev
git branch -d dev  - удаляет ветку dev
git checkout -b dev  - создаёт ветку dev и переходит в неё 
git checkout master  - переключаемся на ветку master
git merge dev (находимся в ветке master)  - находясь в ветке master, перетаскиваем коммиты из dev в master


СВЯЗЬ С УДАЛЕННЫМ РЕПОЗИТОРИЕМ (GitHub):
!!! Если хотим отправить на удаленный репозиторий какую-либо ветку, необходимо в неё сначала перейти!
git remote add origin https://github.com/alisultanov/rep_name.git  - подключение к удалённому репозиторию
git remote - просмотр настроенных удаленных репозиториев
git push -u origin master - отправляем все изменения в удалённый репозиторий (GitHub)

КЛОНИРОВАНИЕ СУЩЕСТВУЮЩЕГО РЕПОЗИТОРИЯ:
!!! Для получения копии существующего Git-репозитория, например, проекта,куда требуется внести свой вклад, необходимо использовать команду git clone.
!!! Git получает копию практически всех данных, которые есть на сервере. При выполнении git clone с сервера забирается (pulled) каждая версия каждого файла из истории проекта.
git clone https://github.com/libgit2/libgit2 - клонирование репозитория


РАБОТА В КОМАНДЕ ПРИ ПОМОЩИ Git:
!!! Когда надо поделиться веткой, необходимо отправить её на удалённый сервер, где есть права на запись. Локальные ветки автоматически не синхронизируются с удалёнными при отправке — нужно указать те ветки, которые вы надо отправить. Таким образом, можно использовать свои личные ветки для работы, которые не надо показывать, а отправлять только те ветки, над которыми можно работать с кем-то совместно.
git push -u origin dev - отправка в удаленный репозиторий ветки




