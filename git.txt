Система контроля версий — это система, записывающая изменения в файл или набор файлов в течение времени и позволяющая вернуться позже к определённой версии

Для чего нужен Git? - Git позволяет гибко управлять проектом, сохраняя код, версионность. Это хороший инструмент для командной работы.  Git представляет свои данные как поток снимков (коммитов)
В Git работа ведётся локально, т.е. нет зависимости от других компьютеров и от сети. Поэтому нет проблем с задержкой сети или резких сбоев работы

Git является распределённой системой контроля версий! (децентрализованной)

ПРЕИМУЩЕСТВА ДЕЦЕНТРАЛИЗАЦИИ: 
1) Безопасность в виде устойчивости к отказам
2) Возможность гибкого управления проектом несколькими людьми
3) Высокая скорость работы

ПРЕИМУЩЕСТВА Git:
1) Скорость
2) Простая архитектура 
3) Хорошая поддержка нелинейной разработки (тысячи параллельных веток)
4) Полная децентрализация
5) Возможность управления большими проектами (например, ядро Linux)

Учитывая  эти преимущества, Git-ом пользуются Google, Microsoft, Amazon, Tesla, SpaceX...

ОСНОВНЫЕ СОСТОЯНИЯ ФАЙЛА В Git
1) Изменен (в рабочем каталоге)
2) Добавлен в индекс (git add)
3) Добавлен в коммит (git commit)

!!! ВАЖНО:
- К изменённым относятся файлы, которые поменялись, но ещё не были зафиксированы
- Индексированный — это изменённый файл в его текущей версии, отмеченный для включения в следующий коммит
- Закомиченный значит, что файл уже сохранён в вашей локальной базе (Комит - слепок системы!). Когда делается коммит, ИСПОЛЬЗУЮТСЯ ФАЙЛЫ ИЗ ИНДЕКСА как есть, и этот снимок сохраняется Git-ом

___________ОСНОВНЫЕ МЕТОДЫ ПРИ РАБОТЕ С Git___________:
ЗАПОЛНЕНИЕ ДАННЫХ ПОЛЬЗОВАТЕЛЯ:
git config --global user.name "Али Султанов"  - Заполнение имени в системе Git
git config --global user.email "ali.sultanov.2024@mail.ru"  - Заполнение почты в системе Git

!!! ОЧЕНЬ ВАЖНО: git commit сохраняет слепок ИЗМЕНЕНИЯ файлов, а те ФАЙЛЫ, которые уже были в рабочем каталоге, но не были добавлены в индекс, в новом коммите все равно будут, НО НЕ БУДЕТ ИЗМЕНЕНИЙ В ЭТИХ ФАЙЛАХ (ЕСЛИ ОНИ БЫЛИ ПРОИЗВЕДЕНЫ)
!!! ОЧЕНЬ ВАЖНО: Начиная с Git 2.23.0 для операций отмен используется команда restore

НАЧАЛО РАБОТЫ В Git В ЛОКАЛЬНОМ РЕПОЗИТОРИЕ:
mkdir repository_name  - создание репозитория в Git
cd repository_name  - переход в сам репозиторий
git init  - инициализация репозитория
git status  - статус репозитория
git --version  - версия Git-a
git log  - смотрим на коммиты, на указатель
clear - почистить экран
touch README.md - создание файла README
git add -A - добавление для внесения в коммит всех файлов в рабочем каталоге (файлы будут гореть зеленым)
git add file_name - добавление для внесения в коммит только одного файла
git commit -m "add new feature in ml_design.py" - создание коммита 
!!!   git restore -- staged filename  - отмена индексации файла (юзаем когда горит зеленым)
!!!   git restore filename  - откат изменений файла в раб. каталоге до последнего коммита (юзаем когда горит красным)

РАБОТА С ВЕТКАМИ В Git:
!!! Git поощряет процесс работы, при котором ветвление и слияние выполняется часто, даже по несколько раз в день. Т.е. имеется долгоживущие и временные ветки
!!! Ветка в Git  - это перемещаемый указатель на коммит
!!! ОЧЕНЬ ВАЖНО: при переключеии ветки, Git возвращает состояние рабочего каталога к тому виду, какой он имел в момент последнего коммита в переключаемую ветку, чтобы состояние рабочего каталога соответствовало тому, когда был сделан последний коммит
git branch  - показывает все существующие ветки в проекте
git branch -v  - показывает последний коммит в каждой из веток
git branch dev  - создаёт ветку dev
git branch -d dev  - удаляет ветку dev
git checkout -b dev  - создаёт ветку dev и переходит в неё 
git checkout master  - переключаемся на ветку master
git merge dev  - (слить ветку master с веткой dev. ВАЖНО при этом находится в ветке master)


СВЯЗЬ С УДАЛЕННЫМ РЕПОЗИТОРИЕМ (GitHub):
!!! ОЧЕНЬ ВАЖНО: если два разработчика вносят изменения, то это означает, что второй разработчик должен вытянуть изменения (git pull), сделанные первым разработчиком, чтобы избежать их перезаписи во время отправки на сервер своих изменений!
!!! ОЧЕНЬ ВАЖНО: когда несколько программистов работают над одной и той же веткой И НАД ОДНИМ И ТЕМ ЖЕ ФАЙЛОМ, может возникнуть merge - конфликт при команде git pull. Его надо решать руками при помощи встроенных методов в IDE языка программирования 
!!! Если хотим отправить на удаленный репозиторий какую-либо ветку, необходимо в неё сначала перейти!
git remote  - просмотр настроенных удаленных репозиториев
git remote add origin https://github.com/alisultanov/rep_name.git  - подключение к удалённому репозиторию
git pull - собрать все коммиты ветки из удаленного репозитория и слить их с локальным репозиторием  (т.е. pull это последовательность двух команд: fethc и merge)
git push -u origin master  - отправляем все изменения в удалённый репозиторий (GitHub)
git push -u origin dev - отправка в удаленный репозиторий ветки
___ДОПОЛНИТЕЛЬНО___:  git fetch, git merge
git fetch  -  сбор всех коммиты из целевой ветки удалённого репозитория и сохранение их в локальном репозитории. Однако сливания их с текущей веткой не происходит
git merge  - cлияние всех коммитов в основную ветку, из которой происходит работа


КЛОНИРОВАНИЕ СУЩЕСТВУЮЩЕГО РЕПОЗИТОРИЯ:
!!! Для получения копии существующего Git-репозитория, например, проекта,куда требуется внести свой вклад, необходимо использовать команду git clone
!!! Git получает копию практически всех данных, которые есть на сервере. При выполнении git clone с сервера забирается (pulled) каждая версия каждого файла из истории проекта
git clone https://github.com/libgit2/libgit2 - клонирование репозитория


РАБОТА В КОМАНДЕ ПРИ ПОМОЩИ Git:
!!! Перед каждой отправкой изменений в удалённый репозиторий, необходимо сначала вытянуть изменения, которые внесли другие разработчики (git pull)
!!! Используя модель ветвления Git, сотни разработчиков могут одновременно работать над одним проектом, используя при этом десятки веток
!!! Когда надо поделиться веткой, необходимо отправить её на удалённый сервер, где есть права на запись. Локальные ветки автоматически не синхронизируются с удалёнными при отправке — нужно указать те ветки, которые вы надо отправить,
!!! ( ПРОДОЛЖЕНИЕ) таким образом, можно использовать свои личные ветки для работы, которые не надо показывать, а отправлять только те ветки, над которыми можно работать с кем-то совместно
!!! В больших компаниях или проектах количество разработчиков может исчисляться тысячами с сотнями тысяч коммитов в день
!!! Надо стараться делать коммит логически разделённого набора изменений. Если возможно, то делать изменения легко понятными — не нужно писать код все выходные, работая над пятью разными задачами, а в понедельник отправлять результат как один большой коммит.
!!! Форк - полная копия публичного репозитория в GitHub
!!! ОЧЕНЬ ВАЖНО: Люди просто могут создавать свои собственные ветвления (Форк), вносить туда изменения, а затем отправлять свои внесённые изменения в оригинальный репозиторий проекта путём создания запроса на принятие изменений (Pull Request)
!!! Запрос на принятие изменений (Pull Request) откроет новую ветвь с обсуждением отправляемого кода, и автор оригинального проекта, а так же другие его участники, могут принимать участие в обсуждении предлагаемых изменений до тех пор, пока автор проекта не будет ими доволен,
!!! (ПРОДОЛЖЕНИЕ) после чего автор проекта может добавить предлагаемые изменения в проект


ЭТАПЫ РАБОТЫ С ФОРК:
Создайте форк проекта
1) Создайте тематическую ветку на основании ветки master
2) Создайте один или несколько коммитов с изменениями, улучшающих проект
3) Отправьте эту ветку в ваш проект на GitHub
4) Откройте запрос на слияние на GitHub
5) Обсуждайте его, вносите изменения, если нужно
6) Владелец проекта принимает решение о принятии изменений, либо об их отклонении
7) Получите обновлённую ветку master и отправьте её в свой форк


!!! Что заполнять в README:
- Для чего предназначен проект
- Инструкции по конфигурации и установке
- Примеры использования
- Используемую лицензию
- Правила участия в проекте
В этот файл можно встраивать изображения или ссылки для простоты восприятия информации
