ВИРТУАЛЬНАЯ МАШИНА (VM) - программа, целью которой является имитация оборудования (т.е. железа) для запуска ОС. Виртуальная машина содержит в себе ОС, причём VM использует выделенные ресурсы реального компьютера


КОНТЕЙНЕРИЗАЦИЯ - программа, целью которой является запуск приложений в виде изолированных контейнеров, причем внутри контейнеров нет своей полноценной ОС (в отличии от VM)


ЧТО ТАКОЕ Docker? - это сервис для запуска приложения в контейнерах (Docker, фактически, позволяет изолировать приложение)
!!! Без Docker-а не обходится разработка ни одного приложения. При помощи Docker-а возможен запуск приложения из контейнера без установки каких-либо зависимостей на сам компьютер
!!! Также при помощи Docker можно запускать различные базы данных, например, MongoDB, MySQL
!!! Docker чаще всего применяется с Kubernetes, так как Kubernetes позволяет управлять запуском разных Docker-контейнеров на разных серверах
!!! В Data Science ML модели можно хранить в Docker - образах и использовать их при выведении ML модели в production


ЗА СЧЁТ ЧЕГО ДОСТИГАЕТСЯ КРОСС-ПЛАТФОРМЕННОСТЬ В Docker:
- Контейнеры создаются на компьютере, который работает под управлением ОС Linux
- Устанавливается на компютере приложение Docker Desktop (Mac or Windows)
- Программа Docker Desktop создает виртуальную машину Linux, внутри которой запускается Docker сервис и соответственно все контейнеры будут создаваться внутри этой VM


Docker ОБРАЗ - основа для создания контейнеров (набор файлов)
!!! ВАЖНО: Docker образ состоит из слоёв. Слой - набор файлов, при создании новой версии образа(например my-img:2.0) некоторые слои уже установлены и docker их не устанавливает заново!!!
!!! ВАЖНО: Docker образ содержит 1) Набор зависимостей; 2) Набор библиотек; 3) Код самого приложения; 4) Инструкцию Dockerfile для cоздания образа (внутри инструкции, в свою очередь хранится инфа и о запуске контейнера на основе образа)
!!! ВАЖНО: Информация о том, какой именно процесс (приложение) запустится в контейнере, находится в образе - это DockerFile
!!! ВАЖНО: На основе одного Docker образа можно создать множество Docker контейнеров
!!! ВАЖНО: Все образы - read-only, т.е. когда образ создан, нельзя его изменить
!!! ВАЖНО: Для образа можно создать разные версии этого образа (т.е. модифицировать его)
!!! ВАЖНО: Образы можно легко удалять и копировать с Docker Hub (реестр репозиториев)
!!! ВАЖНО: Образы хранятся в репозиториях (в одном репозитории может храниться несколько разных версий одного и того же образа)


Docker КОНТЕЙНЕР - запущенный на исполнение Docker Образ (другими словами, это самодостаточная опер.с-ма, которая имеет всё необходимое и код приложения)
!!! ВАЖНО: Контейнер является полностью независимым и изолированным от основной операционной системы, аналогично виртуальной операционной системе
!!! ВАЖНО: Одно приложение - один контейнер
!!! ВАЖНО: Контейнеры можно легко останавливать принудительно
!!! ВАЖНО: Docker автоматически останавливает те контейнеры, у которых нет запущенных процессов
!!! ВАЖНО: Внутри контейнера можно хранить всё, что угодно, например, язык программирования Python или же ОС Linux


ПРЕИМУЩЕСТВА КОНТЕЙНЕРИЗАЦИИ:
1) Приложения запускаются в изолированной среде 
2) Легко запускать приложения на разных серверах (т.е. берем Docker-образ, переносим его с одного компьютера на другой и запускаем контейнер на другом компьютере, при этом контейнеры на разных компах будут вести себя одинаково)
3) Нет необходимости в дополнительной установке каких-либо зависимостей на самих серверах(компьютерах)
4) Легко масштабировать путем увеличения контейнеров (один и тот же образ имеет много контейнеров)
5) Очень удобно использовать в процессе разработки приложений


ОБЩИЕ МЕТОДЫ В Docker:
docker version  - версия докера 


МЕТОДЫ РАБОТЫ С Docker - ОБРАЗАМИ:
docker images  - посмотреть список существующих образов (локальных)
docker build -t my-image .  - создание нового образа. Точка в конце обязательна!
docker build -t my-image:2.0 .  - создание нового образа на основе старого (модифицированного)
docker rmi image_name  - удаление docker образа
docker rmi image_name:2.0  - удаление docker образа определённой версии


МЕТОДЫ РАБОТЫ С Docker - КОНТЕЙНЕРАМИ:
docker ps  - посмотреть список запущенных контейнеров
docker ps -a  - посмотреть список ВСЕХ контейнеров
docker run hello-world  - создание и запуск контейнера (hello-world - НАЗВАНИЕ ОБРАЗА, сначала hello-world ищется локально, если нету, то на Docker Hub)
docker run hello-world:latest  - создание и запуск контейнера с образа hello-world ПОСЛЕДНЕЙ ВЕРСИИ  (можно также :2.0, 3.0 и тд)
docker run -it hello-world  - создание и запуск контейнера в интерактивном режиме 
docker stop сontainer_id  - остановка контейнера по id-шнику (можно также по имени контейнера)
docker stop container_id1 container_id2  - остановка сразу двух контейнеров (без запятой)
docker rm container_id  - удаление остановленного контейнера по id-шнику (можно также по имени контейнера)
docker container prune  - удаление всех остановленных контейеров


___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
ПО ПОВОДУ Dockerfile:
Dockerfile - файл с инструкциями для создания Docker ОБРАЗА !!! 
!!! Для СОЗДАНИЯ ОБРАЗА ВСЕГДА необходим Dockerfile
!!! Dockerfile находится в корне папки самого приложения
!!! Также в Dockerfile можно загружать requirements.txt - т.е. набор библиотек для запуска приложения


ТИПИЧНАЯ СТРУКТУРА Dockerfile-а:

FROM python:alpine  # устанавливаем базовый образ python 

WORKDIR /app  # cоздаём рабочую директорию внутри образа

COPY ./requirements.txt /root/requirements.txt  # копируем все файлы которые хотим установить 

RUN pip install tensorflow  # подгружаем tensorflow

RUN pip install --ignore-installed -r /root/requirements.txt  # подгружаем все библиотеки из requirements.txt

COPY . root/app  # копируем все файлы приложения в рабочую директорию внутрь образа

CMD ["python", "model_pipeline.py"]  # запускаем на исполнение файл model_pipeline.py
___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
Docker Compose - ПО, которое позволяет создавать и управлять сразу несколькими контейнерами (например 15 контейнеров одновременно) на основании простых команд
!!! ВАЖНО: Docker Compose позволяет для создания образов (и контейнеров) использовать декларативный подход, т.е. описываем желаемый результат (без использования docker run, build и тд, а используем инструкции более высокого уровня)
!!! ВАЖНО: Инструкции для создания образов описываются в docker-compose.yml (НАЗВАНИЕ ДОЛЖНО БЫТЬ ИМЕННО ТАКОЕ!!!) файле
!!! ВАЖНО: В Docker Compose все необходимые контейнеры запускаются одной командой 
!!! ВАЖНО: В Docker Compose автоматически создаётся изолированная сеть для взаимодействия контейнеров (подача данных, запись, извлечение из бд и т.д.)
!!! ВАЖНО: D Docker Compose контейнеры взаимодействуют по именам сервисов, которые указаны в docker-compose.yml файле!
!!! ВАЖНО: В Docker Compose можно подавать как готовый Dockerfile для создания образа, так и подать инструкцию в docker-compose.yml файл для скачивания готового образа, т.е. наличие Dockerfile-а не является обязательным!!! 


ТИПЧНАЯ СТРУКТУРА docker-compose.yml ФАЙЛА:

version: '3'  # версия docker-compose файла
services:
    app:  # имя сервиса 1
        build: ./app    # создаём образ на основании готового Dockerfile-а
    mongo:  # имя сервиса 2
        image: mongo    # скачиваем официальный образ из Docker Hub-а 


МЕТОДЫ РАБОТЫ С Docker Compose:
docker-compose up  - создаются образы, запускаются контейнеры, создаётся сеть для взаимодействия контейнеров
docker-compose down  - остановить все контейнеры и удалить их, а также сеть для взаимодействия контейнеров
___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
Docker repository - в репозитории хранится различные версии одного образа
!!! РЕПОЗИТОРИЙ можно хранить локально на компьютере, либо же хранить удалённо их на Docker Hub 


Docker Hub - реестр репозиториев, где живут Docker-образы и доступны для скачивания (или нет, в зависимости от права доступа)
