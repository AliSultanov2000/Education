ВИРТУАЛЬНАЯ МАШИНА (VM) - 


КОНТЕЙНЕРИЗАЦИЯ - 


ЧТО ТАКОЕ Docker? - это сервис для запуска приложения в контейнерах.
!!! Без Docker-а не обходится разработка ни одного приложения. При помощи Docker-а возможен запуск приложения из контейнера без установки каких-либо зависимостей на сам компьютер
!!! Также при помощи Docker можно запускать различные базы данных, например, MongoDB, MySQL
!!! Docker чаще всего применяется с Kubernetes, так как Kubernetes позволяет управлять запуском разных Docker-контейнеров на разных серверах
!!! В Data Science ML модели можно хранить в Docker - образах и использовать их при выведении ML модели в production


ЗА СЧЁТ ЧЕГО ДОСТИГАЕТСЯ КРОСС-ПЛАТФОРМЕННОСТЬ В Docker:
- Контейнеры создаются на компьютере, который работает под управлением ОС Linux
- Устанавливается на компютере приложение Docker Desktop (Mac or Windows)
- Программа Docker Desktop создает виртуальную машину Linux, внутри которой запускается Docker сервис и соответственно все контейнеры будут создаваться внутри этой VM


Docker ОБРАЗ - основа для создания контейнеров (набор файлов)
!!! ВАЖНО: На основе одного Docker образа можно создать множество Docker контейнеров
!!! ВАЖНО: Информация о том, какой именно процесс (приложение) запустится в контейнере, находится в образе - это DockerFile
!!! ВАЖНО: Все образы - read-only, т.е. когда образ создан, нельзя его изменить
!!! ВАЖНО: Для образа можно создать разные версии этого образа (т.е. модифицировать его)
!!! ВАЖНО: Образы можно легко удалять и копировать с Docker Hub (реестр репозиториев)
!!! ВАЖНО: Образы хранятся в репозиториях (в одном репозитории может храниться несколько разных версий одного и того же образа)


Docker КОНТЕЙНЕР - запущенный на исполнение Docker Образ (другими словами, это самодостаточная опер.с-ма, которая имеет всё необходимое и код приложения).
!!! ВАЖНО: Контейнер является полностью независимым и изолированным от основной операционной системы, аналогично виртуальной операционной системе
!!! ВАЖНО: Одно приложение - один контейнер
!!! ВАЖНО: Контейнеры можно легко останавливать принудительно
!!! ВАЖНО: Docker автоматически останавливает те контейнеры, у которых нет запущенных процессов
!!! ВАЖНО: Внутри контейнера можно хранить всё, что угодно, например, язык программирования Python или же ОС Linux





ПРЕИМУЩЕСТВА КОНТЕЙНЕРИЗАЦИИ:
1) Приложения запускаются в изолированной среде 
2) Легко запускать приложения на разных серверах (т.е. берем Docker-образ, переносим его с одного компьютера на другой и запускаем контейнер на другом компьютере, при этом контейнеры на разных компах будут вести себя одинаково)
3) Нет необходимости в дополнительной установке каких-либо зависимостей на самих серверах(компьютерах)
4) Легко масштабировать путем увеличения контейнеров (один и тот же образ имеет много контейнеров)
5) Очень удобно использовать в процессе разработки приложений


НЕДОСТАТКИ КОНТЕЙНЕРИЗАЦИИ:


ОБЩИЕ МЕТОДЫ В Docker:
docker version  - версия докера 


МЕТОДЫ РАБОТЫ С Docker - ОБРАЗАМИ:
docker images  - посмотреть список существующих образов (локальных)

ПО ПОВОДУ Dockerfile:
Dockerfile - файл с инструкциями для создания Docker ОБРАЗА
!!! Для СОЗДАНИЯ ОБРАЗА ВСЕГДА необходим Dockerfile
!!! Dockerfile находится в корне папки самого приложения


МЕТОДЫ РАБОТЫ С Docker - КОНТЕЙНЕРАМИ:
docker ps  - посмотреть список запущенных контейнеров
docker ps -a  - посмотреть список ВСЕХ контейнеров
docker run hello-world  - создание и запуск контейнера (hello-world - НАЗВАНИЕ ОБРАЗА, сначала hello-world ищется локально, если нету, то на Docker Hub)
docker run hello-world:latest  - создание и запуск контейнера с образа hello-world ПОСЛЕДНЕЙ ВЕРСИИ  (можно также :2.0, 3.0 и тд)
docker run -it hello-world  - создание и запуск контейнера в интерактивном режиме 
docker stop сontainer_id  - остановка контейнера по id-шнику (можно также по имени контейнера)
docker stop container_id1 container_id2  - остановка сразу двух контейнеров (без запятой)
docker rm container_id  - удаление остановленного контейнера по id-шнику (можно также по имени контейнера)
docker container prune  - удаление всех остановленных контейеров


Docker Compose - 


Docker repository - в репозитории хранится различные версии одного образа.
!!! РЕПОЗИТОРИЙ можно хранить локально на компьютере, либо же хранить удалённо их на Docker Hub 


Docker Hub - реестр репозиториев, где живут Docker-образы и доступны для скачивания (или нет, в зависимости от права доступа)
